:: Обновим pip и поставим PyTorch с CUDA (выберите одну строку index-url)
python -m pip install --upgrade pip

:: Вариант A: CUDA 12.1
python -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

:: Вариант B: CUDA 12.4
:: python -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124

:: Библиотеки для SDXL
python -m pip install diffusers transformers accelerate safetensors pillow

:: (Опционально, даёт +скорость и -VRAM; если не соберётся — просто пропустите)
python -m pip install xformers




python - <<PY
import torch
print("CUDA available:", torch.cuda.is_available())
print("Device:", torch.cuda.get_device_name(0) if torch.cuda.is_available() else "CPU")
PY





import os, time, json
from typing import Optional
import torch
from PIL import PngImagePlugin
from diffusers import StableDiffusionXLPipeline

# ==== Пользовательские настройки ====
PROMPT = "lofi night city by the lake, neon reflections, cinematic, cozy atmosphere"
NEGATIVE = "blurry, low quality, distorted, extra limbs, watermark, text"
SEED: Optional[int] = 42             # None -> случайный
STEPS = 28                           # 22–32 обычно ок
GUIDANCE = 5.5                       # 4.5–7.5
WIDTH, HEIGHT = 832, 1216            # SDXL комфортно 832x1216 / 1024x1024 (для 6–8 GB VRAM лучше 832x1216)
MODEL_ID = "stabilityai/stable-diffusion-xl-base-1.0"
OUT_DIR = "outputs"
FILENAME_PREFIX = "sdxl_cuda"

# ==== Инициализация устройства ====
assert torch.cuda.is_available(), "CUDA не доступна — проверьте установку драйверов и PyTorch с CUDA."
device = "cuda"
dtype = torch.float16

# ==== Загрузка пайплайна ====
pipe = StableDiffusionXLPipeline.from_pretrained(
    MODEL_ID,
    torch_dtype=dtype,
    variant="fp16",
)
pipe = pipe.to(device)

# Оптимизации по памяти/скорости
pipe.enable_attention_slicing()
pipe.enable_vae_slicing()
try:
    pipe.enable_vae_tiling()
except Exception:
    pass

# xFormers (если установлен — ускорит/снизит VRAM)
try:
    pipe.enable_xformers_memory_efficient_attention()
except Exception:
    # нет xformers или несовместимая сборка — не критично
    pass

# ==== Генерация ====
os.makedirs(OUT_DIR, exist_ok=True)
seed = SEED if SEED is not None else torch.seed() % (2**32 - 1)
generator = torch.Generator(device=device).manual_seed(int(seed))

t0 = time.time()
result = pipe(
    prompt=PROMPT,
    negative_prompt=NEGATIVE,
    num_inference_steps=STEPS,
    guidance_scale=GUIDANCE,
    height=HEIGHT,
    width=WIDTH,
    generator=generator,
)
img = result.images[0]
elapsed = time.time() - t0

# ==== Метаданные в PNG ====
meta = {
    "model": MODEL_ID,
    "prompt": PROMPT,
    "negative_prompt": NEGATIVE,
    "steps": STEPS,
    "guidance": GUIDANCE,
    "width": WIDTH,
    "height": HEIGHT,
    "seed": int(seed),
    "dtype": "fp16",
    "device": "cuda",
    "elapsed_sec": round(elapsed, 2),
    "diffusers": "StableDiffusionXLPipeline",
}
pnginfo = PngImagePlugin.PngInfo()
pnginfo.add_text("sdxl_settings", json.dumps(meta, ensure_ascii=False))

# ==== Сохранение ====
stamp = time.strftime("%Y%m%d-%H%M%S")
out_path = os.path.join(OUT_DIR, f"{FILENAME_PREFIX}_{stamp}_{WIDTH}x{HEIGHT}_seed{seed}.png")
img.save(out_path, pnginfo=pnginfo)
print(f"Saved: {out_path}")
print("Meta:", meta)
